function [warmUpData, data, warmUpRepeats, nRepeats, ...
    referenceBands, referenceBandSettingsLevels, interactingBands, interactingBandSettingsLevels, ...
    steadyBands, steadyBandSettingsLevels] = configExperiment(setType, nPrimariesNum)

    % How many times to repeat each measurement
    if (strcmp(setType, 'warmUpDataOnly')) || (strcmp(setType, 'fastFullON')  || (strcmp(setType, 'combFunctionTest')) )
        nRepeats = 0;  
        warmUpRepeats = GetWithDefault('Enter number of warm-up repeats: ', 100);
    else
        nRepeats = GetWithDefault('Enter number of stimulus repeats (nRepeats): ', 6);
        warmUpRepeats = 50;
    end
    
    % Reference band: One, at the center of the band range
    referenceBands = round(nPrimariesNum/2);
    referenceBandSettingsLevels = [];
    interactingBands = [];
    interactingBandSettingsLevels = [];
    
    % Bands that are constant across all conditions
    steadyBands = [];
    steadyBandSettingsLevels = [];
    
    if (strcmp(setType, 'slidingInteraction'))
        % Measure at these levels
        interactingBandSettingsLevels = [0.25 0.50 0.75 1.0];
        nGammaLevels = 16;
        referenceBandSettingsLevels = linspace(1.0/nGammaLevels, 1.0, nGammaLevels);
        
       % pattern = [1 2 3 4];
        pattern = [1 2 3];
       % pattern = [1 2];
        interactingBands = {};
        
        k = 0;
        while (max(referenceBands) + max(pattern) < 56)
            k = k + 1;
            interactingBands{k} = pattern;
            pattern = pattern + numel(pattern);
        end
        max(max(referenceBands) + max(pattern))
        if (max(max(referenceBands) + max(pattern)) > 56)
            interactingBands = interactingBands(1:(numel(interactingBands)-1));
        end
        
    elseif (strcmp(setType, 'combinatorialFull'))
        % Measure at these levels
        interactingBandSettingsLevels = [0.33 0.66 1.0];
        nGammaLevels = 20;
        referenceBandSettingsLevels = linspace(1.0/nGammaLevels, 1.0, nGammaLevels);
    
        interactingBandLocation = 'BilateralToReferenceBand';
        %interactingBandLocation = 'UnilateralToReferenceBand';
        
        if (strcmp(interactingBandLocation, 'BilateralToReferenceBand'))
            % Measure interactions with bands around the reference band
            % 2 band patterns
            p0 = [ 3  4];
            p1 = [ 1  2];
            p2 = [-2 -1];
            p3 = [-4 -3];
            
            % 3 band patterns
            p0 = [ 4  5  6];
            p1 = [ 1  2  3];
            p2 = [-3 -2 -1];
            p3 = [-6 -5 -4];
            
        elseif (strcmp(interactingBandLocation, 'UnilateralToReferenceBand'))
            % OR Measure interactions with bands to the right of the reference band
            % 2 band patterns
            p0 = [7 8];
            p1 = [5 6];  
            p2 = [3 4];
            p3 = [1 2];
            
            % 3 band patterns
            p0 = [10 11 12];
            p1 = [7 8 9];  
            p2 = [4 5 6];
            p3 = [1 2 3];
        end
        
        interactingBands = { ...
             [                     p0(:) ]; ...
             [p3(:)                      ]; ...
             [              p1(:)        ]; ...
             [       p2(:)               ]; ...
             [p3(:)                p0(:) ]; ...
             [p3(:)  p2(:)               ]; ...
             [              p1(:)  p0(:) ]; ...
             [       p2(:)  p1(:)        ]; ...
             [       p2(:)  p1(:)  p0(:) ]; ...
             [p3(:)  p2(:)  p1(:)        ]; ...
             [p3(:)  p2(:)  p1(:)  p0(:) ]; ...
             [       p2(:)         p0(:) ]; ...
             [p3(:)         p1(:)        ]; ...
             [p3(:)         p1(:)  p0(:) ]; ...
             [p3(:)  p2(:)         p0(:) ]; ...
            };
 
    elseif (strcmp(setType, 'combinatorialSmall'));
        % Measure at these levels
        interactingBandSettingsLevels = [0.4 0.8];
        nGammaLevels = 6;
        referenceBandSettingsLevels = linspace(1.0/nGammaLevels, 1.0, nGammaLevels);
    
        % Measure interactions at these bands around the reference band
        pattern0 = [1 2 3 4];
        pattern1 = [-4 -3 -2 -1];
        interactingBands = { ...
            [            pattern0(:)]; ...
            [pattern1(:)            ]; ...
            [pattern1(:) pattern0(:)]; ...
            };
        
    elseif strcmp(setType, 'wigglySpectrumVariation1');
        
        referenceBands = 25;  % gamma will be measured for band# 25 for all conditions
        nGammaLevels = 20;
        referenceBandSettingsLevels = linspace(1.0/nGammaLevels, 1.0, nGammaLevels);
        
        pattern0 = [1 2 3 4 5 6 7];
        pattern1 = pattern0 + 8;
        pattern2 = pattern1 + 8;
        pattern3 = pattern2 + 8;
        pattern4 = pattern0 - 8;
        pattern5 = pattern4 - 8;
        pattern6 = pattern5 - 8;  
        
        interactingBands = { ...
            [                                                                        pattern3(:)]; ...
            [pattern6(:)                                                                        ]; ...
            [                                                            pattern2(:)            ]; ...
            [            pattern5(:)                                                            ]; ...
            [                                                pattern1(:)                        ]; ...
            [                        pattern4(:)                                                ]; ...
            [                                    pattern0(:)                                    ]; ...
            [                        pattern4(:) pattern0(:)                                    ]; ...
            [                        pattern4(:) pattern0(:) pattern1(:)                        ]; ...
            [            pattern5(:) pattern4(:) pattern0(:) pattern1(:)                        ]; ...
            [            pattern5(:) pattern4(:) pattern0(:) pattern1(:) pattern2(:)            ]; ...
            [pattern6(:) pattern5(:) pattern4(:) pattern0(:) pattern1(:) pattern2(:)            ]; ...
            [pattern6(:) pattern5(:) pattern4(:) pattern0(:) pattern1(:) pattern2(:) pattern3(:)] ...
        };
        
        interactingBandSettingsLevels = [0.1 0.3 0.5 0.7 0.9];

        % these bands will have steady settings across all conditions (except the dark SPD)
        steadyBands = referenceBands + [8 -8 16 -16 24 -24];
        steadyBandSettingsLevels = 0.8 * ones(numel(steadyBands),1);
        
    elseif strcmp(setType, 'wigglySpectrumVariation2')
        
        referenceBands = 25;  % gamma will be measured for band# 25 for all conditions
        nGammaLevels = 1;
        referenceBandSettingsLevels = linspace(1.0/nGammaLevels, 1.0, nGammaLevels);
        
        pattern0 = [1 2 3 4 5 6 7];
        pattern1 = pattern0 + 8;
        pattern2 = pattern1 + 8;
        pattern3 = pattern2 + 8;
        pattern4 = pattern0 - 8;
        pattern5 = pattern4 - 8;
        pattern6 = pattern5 - 8;  
        
        interactingBands = { ...
            [pattern6(:)                                                             pattern3(:)]; ...
            [            pattern5(:)                                     pattern2(:)            ]; ...
            [                                    pattern0(:)                                    ]; ...
            [                        pattern4(:)             pattern1(:)                        ]; ...
            [            pattern5(:)             pattern0(:)             pattern2(:)            ]; ...
            [pattern6(:)             pattern4(:)             pattern1(:)             pattern3(:)] ...
        };
        
        interactingBandSettingsLevels = [0.5 1.0];

        % these bands will have steady settings across all conditions (except the dark SPD)
        steadyBands = referenceBands + [8 -8 16 0 -16 24 -24];
        steadyBandSettingsLevels = ones(numel(steadyBands),1);
        
    elseif (strcmp(setType, 'warmUpDataOnly')) || (strcmp(setType, 'fastFullON')) || (strcmp(setType, 'combFunctionTest'))
        ; % do nothing
    else
        error('Unknown stimulus set: ''%s''\n', setType);
    end
    
    stimPattern = 0;
    
    % add dark SPD
    spdType =  'dark';
    stimPattern = stimPattern + 1;
    activation = zeros(nPrimariesNum,1);
    data{stimPattern} = struct(...
        'spdType', spdType, ...
        'activation', activation, ...
        'referenceBandIndex', [], ...
        'interactingBandsIndex', [], ...
        'referenceBandSettingsIndex', 0, ...
        'interactingBandSettingsIndex', 0, ...
        'measurementTime', [], ...
        'measuredSPD', [] ....
    ); 

    if (~strcmp(setType, 'wigglySpectrumVariation2'))
        % add temporal stability gauge #1 SPD
        spdType = 'temporalStabilityGauge1SPD';
        stimPattern = stimPattern + 1;
        activation = round(rand(nPrimariesNum,1)*100)/100;
        activation(activation < 0.05) = 0.05;
        data{stimPattern} = struct(...
            'spdType', spdType, ...
            'activation', activation, ...
            'referenceBandIndex', [], ...
            'interactingBandsIndex', [], ...
            'referenceBandSettingsIndex', 0, ...
            'interactingBandSettingsIndex', 0, ...
            'measurementTime', [], ...
            'measuredSPD', [] ....
        ); 

        % add temporal stability gauge #2 SPD
        spdType = 'temporalStabilityGauge2SPD';
        stimPattern = stimPattern + 1;
        data{stimPattern} = struct(...
            'spdType', spdType, ...
            'activation', 1-activation, ...
            'referenceBandIndex', [], ...
            'interactingBandsIndex', [], ...
            'referenceBandSettingsIndex', 0, ...
            'interactingBandSettingsIndex', 0, ...
            'measurementTime', [], ...
            'measuredSPD', [] ....
        ); 
    else
        % add temporal stability gauge #1 SPD
        activation =  ones(nPrimariesNum,1);
        activation(steadyBands) = steadyBandSettingsLevels;
        spdType = 'temporalStabilityGauge1SPD';
        stimPattern = stimPattern + 1;
        data{stimPattern} = struct(...
            'spdType', spdType, ...
            'activation', activation, ...
            'referenceBandIndex', [], ...
            'interactingBandsIndex', [], ...
            'referenceBandSettingsIndex', 0, ...
            'interactingBandSettingsIndex', 0, ...
            'measurementTime', [], ...
            'measuredSPD', [] ....
        ); 

        % add temporal stability gauge #2 SPD
        spdType = 'temporalStabilityGauge2SPD';
        activation =  0.5*ones(nPrimariesNum,1);
        activation(steadyBands) = steadyBandSettingsLevels;
        stimPattern = stimPattern + 1;
        data{stimPattern} = struct(...
            'spdType', spdType, ...
            'activation', activation, ...
            'referenceBandIndex', [], ...
            'interactingBandsIndex', [], ...
            'referenceBandSettingsIndex', 0, ...
            'interactingBandSettingsIndex', 0, ...
            'measurementTime', [], ...
            'measuredSPD', [] ....
        ); 
    end
    
    
    % warming up data: 2 temporal stability gauge SPDs
    warmUpData{1} = data{2};
    warmUpData{2} = data{3};
    
    
    if (strcmp(setType, 'warmUpDataOnly'))
        % add noise pattern SPDs
        
        % Levels at which to examine the 5-level noise patterns
        noisePatternLevels = 0.2:0.1:0.8;
        noiseActivationPattern1 = ((round(rand(nPrimariesNum,1)*4))-2)*0.1;
        noiseActivationPattern2 = -noiseActivationPattern1;
        
        for k = 1:numel(noisePatternLevels)
            spdType =  sprintf('noisePattern1Level%d', k);
            stimPattern = stimPattern + 1;
            data{stimPattern} = struct(...
                'spdType', spdType, ...
                'activation', noisePatternLevels(k) + noiseActivationPattern1, ...
                'referenceBandIndex', [], ...
                'interactingBandsIndex', [], ...
                'referenceBandSettingsIndex', 0, ...
                'interactingBandSettingsIndex', 0, ...
                'measurementTime', [], ...
                'measuredSPD', [] ....
            );

            spdType = sprintf('noisePattern2Level%d', k);
            stimPattern = stimPattern + 1;
            data{stimPattern} = struct(...
                'spdType', spdType, ...
                'activation', noisePatternLevels(k) + noiseActivationPattern2, ...
                'referenceBandIndex', [], ...
                'interactingBandsIndex', [], ...
                'referenceBandSettingsIndex', 0, ...
                'interactingBandSettingsIndex', 0, ...
                'measurementTime', [], ...
                'measuredSPD', [] ....
            ); 
        
            warmUpData{2+(k-1)*2+1} = data{3+(k-1)*2+1};
            warmUpData{2+(k-1)*2+2} = data{3+(k-1)*2+2};
        end % for k 
    else
        % Gamma experiment
        % if we have steady bands add an SPD with those bands only activated
        if (~isempty(steadyBands))
            spdType = 'steadyBandsOnly';
            stimPattern = stimPattern + 1;
            activation = zeros(nPrimariesNum,1);
            activation(steadyBands) = steadyBandSettingsLevels;
            data{stimPattern} = struct(...
                'spdType', spdType, ...
                'activation', activation, ...
                'referenceBandIndex', [], ...
                'interactingBandsIndex', [], ...
                'referenceBandSettingsIndex', 0, ...
                'interactingBandSettingsIndex', 0, ...
                'measurementTime', [], ...
                'measuredSPD', [] ....
            );
        end
    
        for referenceBandIndex = 1:numel(referenceBands)
            referenceBand = referenceBands(referenceBandIndex);
            for referenceBandSettingsIndex = 1:numel(referenceBandSettingsLevels)
                referenceBandSettings = referenceBandSettingsLevels(referenceBandSettingsIndex);
                for interactingBandIndex = 1:numel(interactingBands)
                    interactingBand = referenceBand + interactingBands{interactingBandIndex};
                    for interactingBandSettingsIndex = 1:numel(interactingBandSettingsLevels)
                        interactingBandSettings = interactingBandSettingsLevels(interactingBandSettingsIndex);

                        spdType = 'comboSPD';
                        stimPattern = stimPattern + 1;
                        activation = zeros(nPrimariesNum,1);
                        activation(interactingBand) = interactingBandSettings;
                        activation(referenceBand) = referenceBandSettings;
                        if (~isempty(steadyBands))
                            activation(steadyBands) = steadyBandSettingsLevels;
                        end
                        data{stimPattern} = struct(...
                            'spdType', spdType, ...
                            'activation', activation, ...
                            'referenceBandIndex', referenceBandIndex, ...
                            'interactingBandsIndex', interactingBandIndex, ...
                            'referenceBandSettingsIndex', referenceBandSettingsIndex, ...
                            'interactingBandSettingsIndex', interactingBandSettingsIndex, ...
                            'measurementTime', [], ...
                            'measuredSPD', [] ....
                        );
                
                        if (~strcmp(setType, 'wigglySpectrumVariation2'))
                            if (referenceBandSettingsIndex == 1)
                                spdType = 'singletonSPDi';
                                stimPattern = stimPattern + 1;
                                activation = zeros(nPrimariesNum,1);
                                activation(interactingBand) = interactingBandSettings;
                                if (~isempty(steadyBands))
                                    activation(steadyBands) = steadyBandSettingsLevels;
                                end
                                data{stimPattern} = struct(...
                                    'spdType', spdType, ...
                                    'activation', activation, ...
                                    'referenceBandIndex', referenceBandIndex, ...
                                    'interactingBandsIndex', interactingBandIndex, ...
                                    'referenceBandSettingsIndex', 0, ...
                                    'interactingBandSettingsIndex', interactingBandSettingsIndex, ...
                                    'measurementTime', [], ...
                                    'measuredSPD', [] ....
                                );
                            end
                        end
                    
                    end % for interactingBandSettingsIndex 
                end % interactingBandIndex
            
                spdType = 'singletonSPDr';
                stimPattern = stimPattern + 1;
                activation = zeros(nPrimariesNum,1);
                activation(referenceBand) = referenceBandSettings;
                if (~isempty(steadyBands))
                   activation(steadyBands) = steadyBandSettingsLevels;
                end
                data{stimPattern} = struct(...
                            'spdType', spdType, ...
                            'activation', activation, ...
                            'referenceBandIndex', referenceBandIndex, ...
                            'interactingBandsIndex', [], ...
                            'referenceBandSettingsIndex', referenceBandSettingsIndex, ...
                            'interactingBandSettingsIndex', 0, ...
                            'measurementTime', [], ...
                            'measuredSPD', [] ....
                        );
            end % referenceBandSettingsIndex
        end % referenceBandIndex
    end % Gamma experiment

    if (strcmp(setType, 'fastFullON')) 
        spdType =  sprintf('FastFullON');
        stimPattern = 1;
        warmUpData = {};
        warmUpData{stimPattern} = struct(...
                'spdType', spdType, ...
                'activation', ones(nPrimariesNum,1), ...
                'referenceBandIndex', [], ...
                'interactingBandsIndex', [], ...
                'referenceBandSettingsIndex', 0, ...
                'interactingBandSettingsIndex', 0, ...
                'measurementTime', [], ...
                'measuredSPD', [] ....
            );
        data = warmUpData;
    end
    
    if (strcmp(setType, 'combFunctionTest'))   
        combPatternComponents = 25 + [8 -8 16 0 -16 24 -24];
        
        warmUpData = {};
        
        
        stimPattern = 1;
        spdType =  sprintf('Dark');
        warmUpData{stimPattern} = struct(...
                'spdType', spdType, ...
                'activation', zeros(nPrimariesNum,1), ...
                'referenceBandIndex', [], ...
                'interactingBandsIndex', [], ...
                'referenceBandSettingsIndex', 0, ...
                'interactingBandSettingsIndex', 0, ...
                'measurementTime', [], ...
                'measuredSPD', [] ....
            );
        
        stimPattern = stimPattern+1;
        spdType =  sprintf('FullON');
        warmUpData{stimPattern} = struct(...
                'spdType', spdType, ...
                'activation', ones(nPrimariesNum,1), ...
                'referenceBandIndex', [], ...
                'interactingBandsIndex', [], ...
                'referenceBandSettingsIndex', 0, ...
                'interactingBandSettingsIndex', 0, ...
                'measurementTime', [], ...
                'measuredSPD', [] ....
            );
        
        stimPattern = stimPattern+1;
        spdType =  sprintf('CombPattern');
        activation = zeros(nPrimariesNum,1);
        activation(combPatternComponents) = 1.0;
        warmUpData{stimPattern} = struct(...
                'spdType', spdType, ...
                'activation', activation, ...
                'referenceBandIndex', [], ...
                'interactingBandsIndex', [], ...
                'referenceBandSettingsIndex', 0, ...
                'interactingBandSettingsIndex', 0, ...
                'measurementTime', [], ...
                'measuredSPD', [] ....
            );
        
        for componentIndex = 1:numel(combPatternComponents)
            stimPattern = stimPattern+1;
            spdType =  sprintf('CombPatternComponent_%d', componentIndex);
            activation = zeros(nPrimariesNum,1);
            activation(combPatternComponents(componentIndex)) = 1.0;
            warmUpData{stimPattern} = struct(...
                'spdType', spdType, ...
                'activation', activation, ...
                'referenceBandIndex', [], ...
                'interactingBandsIndex', [], ...
                'referenceBandSettingsIndex', 0, ...
                'interactingBandSettingsIndex', 0, ...
                'measurementTime', [], ...
                'measuredSPD', [] ....
            );
        end
        
        data = warmUpData; 
    end
    
    
    
    nSpectraMeasured = numel(data);
    fprintf('There will be %d distinct spectra measured (%d reps). \n', nSpectraMeasured, nRepeats);
    
    % Plot the activations (before randomization)
    if (nSpectraMeasured > 100)
        N = 10;
    else
        N = 1;
    end
    nn = floor(nSpectraMeasured/N);
    
    for k = 1:(N+1)
        hFig = figure(1+k); clf; set(hFig, 'Position', [1+k*100 1 573 1290]);
        subplot('Position', [0.04 0.04 0.95 0.95]);
        stimIndices = (k-1)*nn + (1:nn);
        stimIndices = stimIndices(stimIndices <= nSpectraMeasured);
        if (~isempty(stimIndices))
            activationMatrix = Core.retrieveActivationSequence(data, stimIndices);
            if (size(activationMatrix,1) > 1)
                pcolor(1:nPrimariesNum, stimIndices, activationMatrix);
                xlabel('primary no');
                ylabel('spectrum no');
                set(gca, 'CLim', [0 1], 'YLim', [stimIndices(1) stimIndices(end)]);
                colormap(gray(1024));
            else
                bar(1:nPrimariesNum, activationMatrix, 1);
                ylabel('settings');
                set(gca, 'YLim', [0 1], 'XLim', [0 nPrimariesNum]);
                xlabel('primary no');
            end
        end
    end
    
end

