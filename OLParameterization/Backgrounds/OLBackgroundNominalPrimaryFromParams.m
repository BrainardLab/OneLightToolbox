function backgroundPrimary = OLBackgroundNominalPrimaryFromParams(backgroundParams,calibration,varargin)
% Generate a parameterized background from the given parameters
%
% Syntax:
%   backgroundPrimary = OLBackgroundNominalFromParams(backgroundParams)
%
% Description:
%    For several common types of backgrounds, this function can generate
%    the actual background primary from parameters.
%
%    This function currently knows about the following types:
%       - named
%       - optimized
%       - lightfluxchrom
%
%    These parameters can be generated by OLBackgroundParamsDefaults,
%    validated by OLBackgroundParamsValidate, and several sets of
%    parameters are predefined in OLBackgroundParamsDictionary.
%
% Inputs:
%    backgroundParams  - struct defining the parameters for a type of
%                        background. Can be generated using
%                        OLBackgroundParamsDefaults
%
% Outputs:
%    backgroundPrimary - column vector of primary values for the background
%
% Optional key/value pairs:
%    None.
%
% Notes:
%    * [01/31/18  jv  TODO: this function knows about 'named'-type
%       backgrounds, but these are not in the other BackgroundParams
%       functions]
%
% See also:
%    OLBackgroundParamsDefaults, OLBackgroundParamsValidate,
%    OLBackgroundParamsDictionary

% History:
%    01/31/18  jv  wrote it, based on OLDirectionNominalStructFromParams
%                  and OLReceptorIsolateMakeBackgroundNominalPrimaries

%% Input validation
parser = inputParser();
parser.addRequired('backgroundParams',@isstruct);
parser.addRequired('calibration',@isstruct);
parser.addOptional('verbose',false,@islogical);
parser.parse(backgroundParams,calibration,varargin{:});

% assert(OLBackgroundParamsValidate(backgroundParams),...
%     'OneLightToolbox:Dictionaries:BackgroundNominalStructFromParams:InvalidParams',...
%     'Invalid background parameters');

%% Generate background
switch backgroundParams.type
    case 'named'
        % These are cases where we just do something very specific with the
        % name.
        switch backgroundParams.name
            case 'BackgroundHalfOn'
                backgroundPrimary = 0.5*ones(size(calibration.computed.pr650M,2),1);
            case 'BackgroundEES'
                backgroundPrimary = InvSolveChrom(calibration, [1/3 1/3]);
            otherwise
                error('Unknown named background passed');
        end
        
    case 'lightfluxchrom'
        % Background at specified chromaticity that allows a large light
        % flux pulse modulation.
        maxBackgroundPrimary = OLBackgroundInvSolveChrom(calibration, backgroundParams.lightFluxDesiredXY);
        backgroundPrimary = maxBackgroundPrimary/backgroundParams.lightFluxDownFactor;
        
    case 'optimized'
        % These backgrounds get optimized according to the parameters in
        % the structure.  Backgrounds are optimized with respect to a
        % backgroundParams.backgroundObserverAge year old observer, and no correction
        % for photopigment bleaching is applied.  We are just trying to get
        % pretty good backgrounds, so we don't need to fuss with small
        % effects.
        
        %% Photoreceptor classes: cell array of strings
        photoreceptorClasses = backgroundParams.photoreceptorClasses;
        
        %% Set up what will be common to all observer ages
        % Pull out the 'M' matrix
        B_primary = calibration.computed.pr650M;
        
        %% Set up parameters for the optimization
        whichPrimariesToPin = [];
        whichReceptorsToIgnore = backgroundParams.whichReceptorsToIgnore;
        whichReceptorsToIsolate = backgroundParams.whichReceptorsToIsolate;
        whichReceptorsToMinimize = backgroundParams.whichReceptorsToMinimize;
        
        % Peg desired contrasts
        if ~isempty(backgroundParams.modulationContrast)
            desiredContrasts = backgroundParams.modulationContrast;
        else
            desiredContrasts = [];
        end
        
        % Assign a zero 'ambientSpd' variable if we're not using the
        % measured ambient.
        if backgroundParams.useAmbient
            ambientSpd = calibration.computed.pr650MeanDark;
        else
            ambientSpd = zeros(size(B_primary,1),1);
        end
              
        %% Initial background
        % Start at mid point of primaries.
        backgroundPrimary = 0.5*ones(size(B_primary,2),1);
        
        %% Construct the receptor matrix
        lambdaMaxShift = zeros(1, length(photoreceptorClasses));
        fractionBleached = zeros(1,length(photoreceptorClasses));
        T_receptors = GetHumanPhotoreceptorSS(calibration.describe.S, photoreceptorClasses, backgroundParams.fieldSizeDegrees, backgroundParams.backgroundObserverAge, backgroundParams.pupilDiameterMm, lambdaMaxShift, fractionBleached);
        
        %% Isolate the receptors by calling the wrapper
        initialPrimary = backgroundPrimary;
        optimizedBackgroundPrimaries = ReceptorIsolateOptimBackgroundMulti(T_receptors, whichReceptorsToIsolate, ...
            whichReceptorsToIgnore,whichReceptorsToMinimize,B_primary,backgroundPrimary,...
            initialPrimary,whichPrimariesToPin,backgroundParams.primaryHeadRoom,backgroundParams.maxPowerDiff,...
            desiredContrasts,ambientSpd,backgroundParams.directionsYoked,backgroundParams.directionsYokedAbs,backgroundParams.pegBackground);
        
        %% Pull out what we want
        backgroundPrimary = optimizedBackgroundPrimaries{1};   
        
    otherwise
        error('Unknown type for background passed');
end

end

